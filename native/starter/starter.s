;
; File generated by cc65 v 2.18 - Git N/A
;
	.fopt		compiler,"cc65 v 2.18 - Git N/A"
	.setcpu		"65816"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_itoa
	.import		_ltoa
	.export		_print
	.export		_printLong
	.export		_printInt
	.export		_intrVec
	.export		_select
	.export		_unselect
	.export		_readSPI
	.export		_print_vid
	.export		_clearScreen
	.export		_intr
	.export		_main

.segment	"DATA"

_x:
	.byte	$00
_y:
	.byte	$00

.segment	"RODATA"

L00AF:
	.byte	$53,$4B,$49,$50,$20,$28,$53,$54,$41,$52,$54,$45,$52,$29,$20,$00
L00BE:
	.byte	$52,$45,$41,$44,$49,$4E,$47,$20,$28,$42,$41,$53,$49,$43,$29,$00
L0054:
	.byte	$20,$53,$54,$41,$52,$54,$20,$00
L00CA:
	.byte	$20,$42,$59,$54,$45,$53,$0D,$00
L0059:
	.byte	$20,$4C,$45,$4E,$20,$00
L0011:
	.byte	$20,$4F,$46,$53,$20,$00
L00C5:
	.byte	$20,$4E,$20,$00
L00B6	:=	L00C5+0
L00BB:
	.byte	$20,$0D,$00

.segment	"BSS"

_intrVec:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ print (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_print: near

.segment	"CODE"

	jsr     pushax
	lda     #$02
	jsr     _select
	jmp     L0063
L0061:	ldy     #$01
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	ina
	bne     L0068
	inx
L0068:	ldy     #$00
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	ldy     #$00
	jsr     ldauidx
	sta     $FF80
L0063:	ldy     #$01
	jsr     ldaxysp
	ldy     #$00
	jsr     ldauidx
	cmp     #$00
	jsr     boolne
	jne     L0061
	jsr     _unselect
	jsr     incsp2
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ printLong (long)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printLong: near

.segment	"CODE"

	jsr     pusheax
	ldy     #$14
	jsr     subysp
	ldy     #$17
	jsr     ldeaxysp
	jsr     pusheax
	lda     #$04
	jsr     leaa0sp
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     _ltoa
	lda     sp
	ldx     sp+1
	jsr     _print
	ldy     #$18
	jsr     addysp
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ printInt (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printInt: near

.segment	"CODE"

	jsr     pushax
	ldy     #$14
	jsr     subysp
	ldy     #$15
	jsr     ldaxysp
	jsr     pushax
	lda     #$02
	jsr     leaa0sp
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     _itoa
	lda     sp
	ldx     sp+1
	jsr     _print
	ldy     #$16
	jsr     addysp
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ select (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_select: near

.segment	"CODE"

	jsr     pusha
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	sta     $FF83
	jsr     incsp1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ unselect (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_unselect: near

.segment	"CODE"

	ldx     #$00
	lda     #$00
	sta     $FF83
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ readSPI (long, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_readSPI: near

.segment	"CODE"

	jsr     pusha
	ldy     #$0B
	jsr     subysp
	lda     #<(L0011)
	ldx     #>(L0011)
	jsr     _print
	ldy     #$0F
	jsr     ldeaxysp
	jsr     _printLong
	lda     #$04
	jsr     _select
	ldx     #$00
	lda     #$03
	sta     $FF80
	ldy     #$0F
	jsr     ldeaxysp
	ldy     #$00
	ldx     sreg+1
	bpl     L001E
	dey
L001E:	lda     sreg
	sty     sreg+1
	sty     sreg
	ldx     #$00
	sta     $FF80
	ldy     #$0F
	jsr     ldeaxysp
	txa
	ldx     sreg
	ldy     sreg+1
	sty     sreg
	cpy     #$80
	ldy     #$00
	bcc     L0023
	dey
L0023:	sty     sreg+1
	ldx     #$00
	sta     $FF80
	ldy     #$0F
	jsr     ldeaxysp
	ldx     #$00
	stx     sreg+1
	stx     sreg
	ldx     #$00
	sta     $FF80
	ldx     #$00
	lda     $FF80
	ldy     #$00
	sta     (sp),y
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     aulong
	jsr     axulong
	stx     sreg+1
	sta     sreg
	lda     #$00
	tax
	ldy     #$03
	jsr     steaxysp
	ldx     #$00
	lda     $FF80
	ldy     #$00
	sta     (sp),y
	ldy     #$06
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     aulong
	jsr     axulong
	ldy     sreg
	sty     sreg+1
	stx     sreg
	tax
	lda     #$00
	jsr     tosoreax
	ldy     #$03
	jsr     steaxysp
	ldx     #$00
	lda     $FF80
	ldy     #$00
	sta     (sp),y
	ldy     #$06
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     axulong
	jsr     tosoreax
	ldy     #$03
	jsr     steaxysp
	ldx     #$00
	lda     $FF80
	ldx     #$00
	ldy     #$09
	jsr     staxysp
	ldy     #$0A
	jsr     ldaxysp
	tax
	lda     #$00
	ldy     #$09
	jsr     staxysp
	ldy     #$0A
	jsr     ldaxysp
	jsr     pushax
	ldx     #$00
	lda     $FF80
	jsr     tosorax
	ldy     #$09
	jsr     staxysp
	ldy     #$0B
	lda     (sp),y
	jeq     L0046
	ldy     #$06
	jsr     ldeaxysp
	jsr     pusheax
	ldx     #$FF
	lda     #$00
	sta     sreg
	lda     #$00
	sta     sreg+1
	lda     #$FF
	jsr     tosandeax
	ldy     #$01
	jsr     staxysp
	ldx     #$00
	lda     #$00
	ldy     #$07
	jsr     staxysp
L0045:	ldy     #$08
	jsr     ldaxysp
	jsr     pushax
	ldy     #$0C
	jsr     ldaxysp
	jsr     tosultax
	jne     L0048
	jmp     L0046
L0048:	ldy     #$02
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	ina
	bne     L004F
	inx
L004F:	ldy     #$01
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	jsr     pushax
	ldx     #$00
	lda     $FF80
	ldy     #$00
	jsr     staspidx
	ldy     #$08
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	ina
	bne     L004D
	inx
L004D:	ldy     #$07
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	jmp     L0045
L0046:	jsr     _unselect
	lda     #<(L0054)
	ldx     #>(L0054)
	jsr     _print
	ldy     #$06
	jsr     ldeaxysp
	jsr     _printLong
	lda     #<(L0059)
	ldx     #>(L0059)
	jsr     _print
	ldy     #$0A
	jsr     ldaxysp
	jsr     _printInt
	ldy     #$0A
	jsr     ldaxysp
	jsr     incax5
	jmp     L000F
L000F:	ldy     #$10
	jsr     addysp
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ print_vid (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_print_vid: near

.segment	"CODE"

	jsr     pushax
	ldx     #$80
	lda     #$00
	jsr     pushax
	jmp     L006F
L006D:	ldy     #$03
	jsr     ldaxysp
	ldy     #$00
	jsr     ldauidx
	cmp     #$0D
	jsr     booleq
	jeq     L0071
	ldx     #$00
	lda     #$00
	sta     _x
	ldx     #$00
	lda     _y
	inc     _y
	jmp     L007D
L0071:	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldx     #$00
	lda     _x
	jsr     pushax
	ldx     #$00
	lda     _y
	jsr     pushax
	ldx     #$00
	lda     #$28
	jsr     tosumulax
	jsr     tosaddax
	jsr     tosaddax
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	ldy     #$00
	jsr     ldauidx
	ldy     #$00
	jsr     staspidx
	ldx     #$00
	lda     _x
	inc     _x
	ldx     #$00
	lda     _x
	cmp     #$29
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L007D
	ldx     #$00
	lda     #$00
	sta     _x
	ldx     #$00
	lda     _y
	inc     _y
L007D:	ldy     #$03
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	ina
	bne     L0083
	inx
L0083:	ldy     #$02
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
L006F:	ldy     #$03
	jsr     ldaxysp
	ldy     #$00
	jsr     ldauidx
	cmp     #$00
	jsr     boolne
	jne     L006D
	jsr     incsp4
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ clearScreen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clearScreen: near

.segment	"CODE"

	jsr     decsp2
	ldx     #$00
	lda     #$00
	ldy     #$00
	jsr     staxysp
L0095:	ldy     #$01
	jsr     ldaxysp
	cmp     #$D0
	txa
	sbc     #$07
	bvc     L009C
	eor     #$80
L009C:	asl     a
	lda     #$00
	ldx     #$00
	rol     a
	jne     L0098
	jmp     L0096
L0098:	ldx     #$80
	lda     #$00
	ldy     #$00
	clc
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldx     #$00
	lda     #$20
	ldy     #$00
	jsr     staspidx
	ldx     #$90
	lda     #$00
	ldy     #$00
	clc
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldx     #$00
	lda     #$01
	ldy     #$00
	jsr     staspidx
	ldy     #$01
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	ina
	bne     L009E
	inx
L009E:	ldy     #$00
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	jmp     L0095
L0096:	jsr     incsp2
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ intr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_intr: near

.segment	"CODE"

	ldx     #$00
	lda     #$6C
	jsr     pushax
	ldx     #$02
	lda     #$77
	jsr     pushax
	lda     _intrVec
	ldx     _intrVec+1
	jsr     callax
	jsr     incsp4
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	ldx     #$00
	stx     sreg
	stx     sreg+1
	lda     #$00
	jsr     pusheax
	jsr     decsp2
	jsr     _clearScreen
	lda     #<(L00AF)
	ldx     #>(L00AF)
	jsr     _print
	ldy     #$05
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$09
	jsr     ldeaxysp
	jsr     pusheax
	lda     #$00
	jsr     _readSPI
	jsr     axlong
	jsr     tosaddeax
	ldy     #$02
	jsr     steaxysp
	lda     #<(L00B6)
	ldx     #>(L00B6)
	jsr     _print
	ldy     #$05
	jsr     ldeaxysp
	jsr     _printLong
	lda     #<(L00BB)
	ldx     #>(L00BB)
	jsr     _print
	lda     #<(L00BE)
	ldx     #>(L00BE)
	jsr     _print
	ldy     #$05
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$09
	jsr     ldeaxysp
	jsr     pusheax
	lda     #$01
	jsr     _readSPI
	jsr     axlong
	jsr     tosaddeax
	ldy     #$02
	jsr     steaxysp
	lda     #<(L00C5)
	ldx     #>(L00C5)
	jsr     _print
	ldy     #$05
	jsr     ldeaxysp
	jsr     _printLong
	lda     #<(L00CA)
	ldx     #>(L00CA)
	jsr     _print
	sta     $FFC0
	jmp     $f2b5
	jmp     L00D0
L00D0:	jmp     L00D0
	jsr     incsp6
	rts

.endproc

