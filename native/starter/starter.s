;
; File generated by cc65 v 2.17 - Git N/A
;
	.fopt		compiler,"cc65 v 2.17 - Git N/A"
	.setcpu		"65816"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_itoa
	.import		_ltoa
	.export		_print
	.export		_printLong
	.export		_printInt
	.export		_intrVec
	.export		_select
	.export		_unselect
	.export		_readSPI
	.export		_clearScreen
	.export		_intr
	.export		_main

.segment	"DATA"

_x:
	.byte	$00
_y:
	.byte	$00

.segment	"RODATA"

L00AC:
	.byte	$52,$45,$41,$44,$49,$4E,$47,$20,$28,$4C,$4F,$41,$44,$45,$52,$29
	.byte	$20,$00
L00CA:
	.byte	$52,$45,$41,$44,$49,$4E,$47,$20,$28,$4B,$45,$52,$4E,$41,$4C,$29
	.byte	$00
L00BB:
	.byte	$52,$45,$41,$44,$49,$4E,$47,$20,$28,$42,$41,$53,$49,$43,$29,$00
L0042:
	.byte	$20,$53,$54,$41,$52,$54,$20,$00
L002D	:=	L0042+0
L00D6:
	.byte	$20,$42,$59,$54,$45,$53,$0D,$00
L0038	:=	L0042+0
L00C7	:=	L00D6+0
L004F:
	.byte	$20,$4C,$45,$4E,$20,$00
L0011:
	.byte	$20,$4F,$46,$53,$20,$00
L00B3:
	.byte	$20,$4E,$20,$00
L00D1	:=	L00B3+0
L00C2	:=	L00B3+0
L00B8:
	.byte	$20,$0D,$00

.segment	"BSS"

_intrVec:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ print (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_print: near

.segment	"CODE"

	jsr     pushax
	ldx     #$04
	lda     #$00
	jsr     pushax
	jmp     L006C
L006A:	ldy     #$03
	jsr     ldaxysp
	ldy     #$00
	jsr     ldauidx
	cmp     #$0D
	jsr     booleq
	jeq     L006E
	ldx     #$00
	lda     #$00
	sta     _x
	ldx     #$00
	lda     _y
	inc     _y
	jmp     L007A
L006E:	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldx     #$00
	lda     _x
	jsr     pushax
	ldx     #$00
	lda     _y
	jsr     pushax
	ldx     #$00
	lda     #$28
	jsr     tosumulax
	jsr     tosaddax
	jsr     tosaddax
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	ldy     #$00
	jsr     ldauidx
	ldy     #$00
	jsr     staspidx
	ldx     #$00
	lda     _x
	inc     _x
	ldx     #$00
	lda     _x
	cmp     #$29
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L007A
	ldx     #$00
	lda     #$00
	sta     _x
	ldx     #$00
	lda     _y
	inc     _y
L007A:	ldy     #$03
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	ina
	bne     L0080
	inx
L0080:	ldy     #$02
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
L006C:	ldy     #$03
	jsr     ldaxysp
	ldy     #$00
	jsr     ldauidx
	cmp     #$00
	jsr     boolne
	jne     L006A
	jsr     incsp4
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ printLong (long)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printLong: near

.segment	"CODE"

	jsr     pusheax
	ldy     #$14
	jsr     subysp
	ldy     #$17
	jsr     ldeaxysp
	jsr     pusheax
	lda     #$04
	jsr     leaa0sp
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     _ltoa
	lda     sp
	ldx     sp+1
	jsr     _print
	ldy     #$18
	jsr     addysp
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ printInt (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printInt: near

.segment	"CODE"

	jsr     pushax
	ldy     #$14
	jsr     subysp
	ldy     #$15
	jsr     ldaxysp
	jsr     pushax
	lda     #$02
	jsr     leaa0sp
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     _itoa
	lda     sp
	ldx     sp+1
	jsr     _print
	ldy     #$16
	jsr     addysp
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ select (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_select: near

.segment	"CODE"

	ldx     #$00
	lda     #$04
	sta     $DE03
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ unselect (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_unselect: near

.segment	"CODE"

	ldx     #$00
	lda     #$00
	sta     $DE03
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ readSPI (long, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_readSPI: near

.segment	"CODE"

	jsr     pusha
	ldy     #$0B
	jsr     subysp
	lda     #<(L0011)
	ldx     #>(L0011)
	jsr     _print
	ldy     #$0F
	jsr     ldeaxysp
	jsr     _printLong
	jsr     _select
	ldx     #$00
	lda     #$03
	sta     $DE00
	ldy     #$0F
	jsr     ldeaxysp
	ldy     #$00
	ldx     sreg+1
	bpl     L001D
	dey
L001D:	lda     sreg
	sty     sreg+1
	sty     sreg
	ldx     #$00
	sta     $DE00
	ldy     #$0F
	jsr     ldeaxysp
	txa
	ldx     sreg
	ldy     sreg+1
	sty     sreg
	cpy     #$80
	ldy     #$00
	bcc     L0022
	dey
L0022:	sty     sreg+1
	ldx     #$00
	sta     $DE00
	ldy     #$0F
	jsr     ldeaxysp
	ldx     #$00
	stx     sreg+1
	stx     sreg
	ldx     #$00
	sta     $DE00
	ldx     #$00
	lda     $DE00
	ldy     #$00
	sta     (sp),y
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     aulong
	jsr     axulong
	stx     sreg+1
	sta     sreg
	lda     #$00
	tax
	ldy     #$03
	jsr     steaxysp
	lda     #<(L002D)
	ldx     #>(L002D)
	jsr     _print
	ldy     #$06
	jsr     ldeaxysp
	jsr     _printLong
	ldx     #$00
	lda     $DE00
	ldy     #$00
	sta     (sp),y
	ldy     #$06
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     aulong
	jsr     axulong
	ldy     sreg
	sty     sreg+1
	stx     sreg
	tax
	lda     #$00
	jsr     tosoreax
	ldy     #$03
	jsr     steaxysp
	lda     #<(L0038)
	ldx     #>(L0038)
	jsr     _print
	ldy     #$06
	jsr     ldeaxysp
	jsr     _printLong
	ldx     #$00
	lda     $DE00
	ldy     #$00
	sta     (sp),y
	ldy     #$06
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     axulong
	jsr     tosoreax
	ldy     #$03
	jsr     steaxysp
	lda     #<(L0042)
	ldx     #>(L0042)
	jsr     _print
	ldy     #$06
	jsr     ldeaxysp
	jsr     _printLong
	ldx     #$00
	lda     $DE00
	ldx     #$00
	ldy     #$09
	jsr     staxysp
	ldy     #$0A
	jsr     ldaxysp
	tax
	lda     #$00
	ldy     #$09
	jsr     staxysp
	ldy     #$0A
	jsr     ldaxysp
	jsr     pushax
	ldx     #$00
	lda     $DE00
	jsr     tosorax
	ldy     #$09
	jsr     staxysp
	lda     #<(L004F)
	ldx     #>(L004F)
	jsr     _print
	ldy     #$0A
	jsr     ldaxysp
	jsr     _printInt
	ldy     #$0B
	lda     (sp),y
	jeq     L0059
	ldy     #$06
	jsr     ldeaxysp
	jsr     pusheax
	ldx     #$FF
	lda     #$00
	sta     sreg
	lda     #$00
	sta     sreg+1
	lda     #$FF
	jsr     tosandeax
	ldy     #$01
	jsr     staxysp
	ldx     #$00
	lda     #$00
	ldy     #$07
	jsr     staxysp
L0058:	ldy     #$08
	jsr     ldaxysp
	jsr     pushax
	ldy     #$0C
	jsr     ldaxysp
	jsr     tosltax
	jne     L005B
	jmp     L0059
L005B:	ldy     #$02
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	ina
	bne     L0062
	inx
L0062:	ldy     #$01
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	jsr     pushax
	ldx     #$00
	lda     $DE00
	ldy     #$00
	jsr     staspidx
	ldy     #$08
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	ina
	bne     L0060
	inx
L0060:	ldy     #$07
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	jmp     L0058
L0059:	jsr     _unselect
	ldy     #$0A
	jsr     ldaxysp
	jsr     incax5
	jmp     L000F
L000F:	ldy     #$10
	jsr     addysp
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ clearScreen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clearScreen: near

.segment	"CODE"

	jsr     decsp2
	ldx     #$00
	lda     #$00
	ldy     #$00
	jsr     staxysp
L0092:	ldy     #$01
	jsr     ldaxysp
	cmp     #$E8
	txa
	sbc     #$03
	bvc     L0099
	eor     #$80
L0099:	asl     a
	lda     #$00
	ldx     #$00
	rol     a
	jne     L0095
	jmp     L0093
L0095:	ldx     #$04
	lda     #$00
	ldy     #$00
	clc
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldx     #$00
	lda     #$20
	ldy     #$00
	jsr     staspidx
	ldx     #$D8
	lda     #$00
	ldy     #$00
	clc
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldx     #$00
	lda     #$01
	ldy     #$00
	jsr     staspidx
	ldy     #$01
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	ina
	bne     L009B
	inx
L009B:	ldy     #$00
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	jmp     L0092
L0093:	jsr     incsp2
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ intr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_intr: near

.segment	"CODE"

	ldx     #$00
	lda     #$6C
	jsr     pushax
	ldx     #$02
	lda     #$77
	jsr     pushax
	lda     _intrVec
	ldx     _intrVec+1
	jsr     callax
	jsr     incsp4
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	ldx     #$01
	lda     #$00
	sta     sreg
	sta     sreg+1
	jsr     pusheax
	jsr     decsp2
	jsr     _clearScreen
	lda     #<(L00AC)
	ldx     #>(L00AC)
	jsr     _print
	ldy     #$05
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$09
	jsr     ldeaxysp
	jsr     pusheax
	lda     #$00
	jsr     _readSPI
	jsr     axlong
	jsr     tosaddeax
	ldy     #$02
	jsr     steaxysp
	lda     #<(L00B3)
	ldx     #>(L00B3)
	jsr     _print
	ldy     #$05
	jsr     ldeaxysp
	jsr     _printLong
	lda     #<(L00B8)
	ldx     #>(L00B8)
	jsr     _print
	lda     #<(L00BB)
	ldx     #>(L00BB)
	jsr     _print
	ldy     #$05
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$09
	jsr     ldeaxysp
	jsr     pusheax
	lda     #$01
	jsr     _readSPI
	jsr     axlong
	jsr     tosaddeax
	ldy     #$02
	jsr     steaxysp
	lda     #<(L00C2)
	ldx     #>(L00C2)
	jsr     _print
	ldy     #$05
	jsr     ldeaxysp
	jsr     _printLong
	lda     #<(L00C7)
	ldx     #>(L00C7)
	jsr     _print
	lda     #<(L00CA)
	ldx     #>(L00CA)
	jsr     _print
	ldy     #$05
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$09
	jsr     ldeaxysp
	jsr     pusheax
	lda     #$01
	jsr     _readSPI
	jsr     axlong
	jsr     tosaddeax
	ldy     #$02
	jsr     steaxysp
	lda     #<(L00D1)
	ldx     #>(L00D1)
	jsr     _print
	ldy     #$05
	jsr     ldeaxysp
	jsr     _printLong
	lda     #<(L00D6)
	ldx     #>(L00D6)
	jsr     _print
	jmp     ($FFFC)
	jmp     L00DA
L00DA:	jmp     L00DA
	jsr     incsp6
	rts

.endproc

